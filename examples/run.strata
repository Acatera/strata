`bits 64
default rel

%include "inc/std.inc"

section .bss
    ; lpStartupInfo resb STARTUPINFOA.size
    hStdOut resq 1
    hStdError resq 1
    lpExitCode resq 1

section .data
    lpStartupInfo: istruc STARTUPINFOA
                   iend
    lpProcessInformation: istruc PROCESS_INFORMATION
                          iend
    lpApplicationName db "nasm.exe -f win64 -g gstr.asm -o gstr.o -w+all -w+error", 0
    lpCommandLine     db "-f win64 -g gstr.asm -o gstr.o -w+all -w+error", 0

section .text
    global _start
    extern CreateProcessA
    extern WaitForSingleObject
    extern GetExitCodeProcess

_start:
    GetStdHandle(STD_OUTPUT_HANDLE, [hStdOut])
    GetStdHandle(STD_ERROR_HANDLE, [hStdError])

    printf([hStdOut], `"STARTUPINFOA size: %d\n\r"`, STARTUPINFOA.size)
    printf([hStdOut], `"Starting process...\n\r"`)
    ; printf([hStdOut], `"Application name: %s\r\n"`, lpApplicationName)
    printf([hStdOut], `"Command line: %s\r\n"`, lpApplicationName)

    memset(lpStartupInfo, 0, STARTUPINFOA.size)

    mov rax, STARTUPINFOA.size
    mov [lpStartupInfo], rax

    ; mov rax, [hStdOut]
    ; mov [lpStartupInfo + STARTUPINFOA.hStdOutput], rax
    ; mov rax, [hStdError]
    ; mov [lpStartupInfo + STARTUPINFOA.hStdError], rax
    
    ; CreateProcessA(lpApplicationName, lpCommandLine, lpProcessAttributes,
    ;     lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment,
    ;     lpCurrentDirectory, lpStartupInfo, lpProcessInformation
    ; )
    and rsp, 0xfffffffffffffff0
    mov rax, lpProcessInformation
    push rax  ; lpProcessInformation
    mov rax, lpStartupInfo
    push rax  ; lpStartupInfo
    push NULL  ; lpCurrentDirectory
    push NULL  ; lpEnvironment
    push 0x00000000  ; dwCreationFlags
    push 0x00000001  ; bInheritHandles
    sub rsp, 0x20
    mov r9, 0 ; lpThreadAttributes
    mov r8, 0 ; lpProcessAttributes
    mov rdx, lpApplicationName
    mov rcx, NULL
    call CreateProcessA
    add rsp, 0x20 + 6 * 0x8

    mov rcx , [lpProcessInformation + PROCESS_INFORMATION.hProcess]
    printf([hStdOut], `"hProcess: %d\n\r"`, rcx)

    mov rdx , 0xFFFFFFFF
    call WaitForSingleObject

    mov rcx , [lpProcessInformation + PROCESS_INFORMATION.hProcess]
    mov rdx , lpExitCode
    call GetExitCodeProcess

    printf([hStdOut], `"Exit code: %d\n\r"`, [lpExitCode])

    ExitProcess(0)

`