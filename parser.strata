`
%include "inc/std.inc"

section .text   
    global _start

_start:
    InitStandardOutput()
`
uint64 _ = 0 ;
uint64 true = 1 ;

array globalVariables = uint64 [ 10000 ] ;
uint64 globalVariableCount = 0 ;
uint64 globalVariableSize = 3 ;

uint64 gvTypeOffset  = 0 ;
uint64 gvNameOffset  = 1 ;
uint64 gvValueOffset = 2 ;

uint64 gvType        = 0 ;
uint64 gvNamePointer = 0 ;
uint64 gvValue       = 0 ;

proc forward readString

proc addGlobalVariable ( type namePointer value )
    _ = gvTypeOffset + globalVariableCount * globalVariableSize ;
    globalVariables [ _ ] = type ;
    _ = gvNameOffset + globalVariableCount * globalVariableSize ;
    globalVariables [ _ ] = namePointer ;
    _ = gvValueOffset + globalVariableCount * globalVariableSize ;
    globalVariables [ _ ] = value ; 
    globalVariableCount = globalVariableCount + 1 ;
endproc addGlobalVariable

array globalSymbolTable = uint64 [ 10000 ] ;
uint64 globalSymbolsCount = 0 ;
uint64 globalSymbolSize = 3 ;

uint64 gsType        = 0 ;
uint64 gsNamePointer = 0 ;
uint64 gsValue       = 0 ;

uint64 gsTypeOffset  = 0 ;
uint64 gsNameOffset  = 1 ;
uint64 gsValueOffset = 2 ;

proc addGlobalSymbol ( type namePointer value )
    _ = gvTypeOffset + globalSymbolsCount * globalSymbolSize ;
    globalSymbolTable [ _ ] = type ;
    _ = gvNameOffset + globalSymbolsCount * globalSymbolSize ;
    globalSymbolTable [ _ ] = namePointer ;
    _ = gvValueOffset + globalSymbolsCount * globalSymbolSize ;
    globalSymbolTable [ _ ] = value ; 
    globalSymbolsCount = globalSymbolsCount + 1 ;
endproc addGlobalSymbol


proc stringsEqual ( a b ) 
    _ = readString ( a ) ; `
    mov rsi, rax
    mov rax, stringBuffer
    add rsi, rax
    `
    _ = readString ( b ) ; `
    mov rdi, rax
    mov rax, stringBuffer
    add rdi, rax
.t:
    printf(`"[Trace] Comparing strings: %s and %s\n"`, rsi, rdi)
.loop:
    mov al, byte [rdi]
    mov bl, byte [rsi]
    cmp al, bl
    jne .str_neq
    cmp al, 0
    je .str1_null
    cmp bl, 0
    je .str2_null
    inc rdi
    inc rsi
    jmp .loop

.str1_null:
    cmp bl, 0
    je .str_eq
    jmp .str_neq

.str2_null:
    cmp al, 0
    je .str_eq
    jmp .str_neq    

.str_neq:
    xor rax, rax
    jmp .end

.str_eq:
    mov rax, 1
.end: `
endproc stringsEqual

uint64 fgsIndex = 0 ;
uint64 fgsNamePointer = 0 ;
uint64 fgsEqual = 0 ;
proc findGlobalSymbol ( namePointer )
    fgsIndex = 0 ;
    while fgsIndex < [globalSymbolsCount] do
        _ = gvNameOffset + fgsIndex * globalSymbolSize ;
        fgsNamePointer = globalSymbolTable [ _ ] ;
        fgsEqual = stringsEqual ( namePointer fgsNamePointer ) ;

        if fgsEqual != 0 then
            break ;
        end

        fgsIndex = fgsIndex + 1 ;
    end

    if fgsEqual == [true] then
        _ = gsTypeOffset + fgsIndex * globalSymbolSize ;
        gsType = globalSymbolTable [ _ ] ;
        _ = gsNameOffset + fgsIndex * globalSymbolSize ;
        gsNamePointer = globalSymbolTable [ _ ] ;
        _ = gsValueOffset + fgsIndex * globalSymbolSize ;
        gsValue = globalSymbolTable [ _ ] ;
        
        _ = gvValueOffset + fgsIndex * globalSymbolSize ;
        ` ; a
        printf(`"[Trace] Found global symbol: #%d with value %d.\n"`, [fgsIndex], [_])
         ; b
        mov rax, [_] `
    else
        gsType = 0 ;
        gsNamePointer = 0 ;
        gsValue = 0 ;

        ` ; a
        printf(`"[Trace] Did not find global symbol.\n"`)
         ; b
        mov rax, -1 `
    end
endproc findGlobalSymbol

uint64 currentToken = 0 ;
uint64 expectedToken = 0 ;
uint64 nextToken = 0 ;

array stringBuffer = uint8 [ 100000 ] ;
uint64 sbIndex = 0 ;
uint64 stringBufferTop = 0 ;
array stringPointers = uint64 [ 5000 ] ;
uint64 stringPointersTop = 0 ;

array stringToPush = uint8 [ 256 ] ;
uint64 freeStringIndex = 0 ;
uint8 freeChar = 0 ;
proc pushString ( ) 
    freeStringIndex = 0 ;
    freeChar = stringToPush [ freeStringIndex ] ;
    stringPointers [ stringPointersTop ] = stringBufferTop ;

    while freeChar != 0 do 
        stringBuffer [ stringBufferTop ] = freeChar ;
        stringBufferTop = stringBufferTop + 1 ;
        freeStringIndex = freeStringIndex + 1 ;
        freeChar = stringToPush [ freeStringIndex ] ;
    end
    
    stringBuffer [ stringBufferTop ] = 0 ;
    stringBufferTop = stringBufferTop + 1 ; 
    `
    printf(`"[Trace] Pushed string: #%d with length %d.\n"`, [stringPointersTop], [freeStringIndex])
    `
    stringPointersTop = stringPointersTop + 1 ; 
endproc pushString 

array stringAtPointer = uint8 [ 256 ] ;
proc readString ( index )
    freeStringIndex = 0 ;
    _ = index ;
    sbIndex = stringPointers [ _ ] ;
    _ = sbIndex ;
    freeChar = stringBuffer [ sbIndex ] ;

    while freeChar != 0 do 
        stringAtPointer [ freeStringIndex ] = freeChar ;
        freeStringIndex = freeStringIndex + 1 ;
        sbIndex = sbIndex + 1 ;
        freeChar = stringBuffer [ sbIndex ] ;
    end 
    stringAtPointer [ freeStringIndex ] = 0 ; `
    printf(`"[Trace] Read string: #%d with length %d.\n"`, [rbp + 16], [freeStringIndex])
    mov rax, [_]`
endproc readString

array tokens = uint64 [ 1000 ] ;
uint64 tokenCount = 0 ;
uint64 tokenSize = 4 ;

array output = uint8 [ 1000000 ] ;
uint64 outputCount = 0 ;

uint64 TOKEN_UINT8                    =  1 ;
uint64 TOKEN_UINT64                   =  2 ;
uint64 TOKEN_IDENTIFIER               =  3 ;
uint64 TOKEN_ASSIGNMENT               =  4 ;
uint64 TOKEN_CONSTANT_INTEGER         =  5 ;
uint64 TOKEN_SEMICOLON                =  6 ;

uint64 TOKEN_PLUS                     =  7 ;
uint64 TOKEN_MINUS                    =  8 ;
uint64 TOKEN_MULTIPLY                 =  9 ;
uint64 TOKEN_DIVIDE                   = 10 ;
uint64 TOKEN_MODULO                   = 11 ;

uint64 TOKEN_LEFT_PARENTHESIS         = 12 ;
uint64 TOKEN_RIGHT_PARENTHESIS        = 13 ;

uint64 TOKEN_LEFT_BRACKET             = 14 ;
uint64 TOKEN_RIGHT_BRACKET            = 15 ;
uint64 TOKEN_LESS_THAN                = 16 ;
uint64 TOKEN_LESS_THAN_OR_EQUAL_TO    = 17 ;
uint64 TOKEN_GREATER_THAN             = 18 ;
uint64 TOKEN_GREATER_THAN_OR_EQUAL_TO = 19 ;
uint64 TOKEN_EQUALS                   = 20 ;
uint64 TOKEN_NOT_EQUALS               = 21 ;

uint64 TOKEN_LOGICAL_AND              = 22 ;
uint64 TOKEN_LOGICAL_OR               = 23 ;

uint64 TOKEN_IF                       = 24 ;
uint64 TOKEN_THEN                     = 25 ;
uint64 TOKEN_ELSE                     = 26 ;
uint64 TOKEN_END                      = 27 ;

uint64 TOKEN_WHILE                    = 28 ;
uint64 TOKEN_DO                       = 29 ;
uint64 TOKEN_BREAK                    = 30 ;
uint64 TOKEN_CONTINUE                 = 31 ;

uint64 TYPE_UINT8                  = 1 ;
uint64 TYPE_UINT64                 = 2 ;

uint64 i = 0 ;

tokens [ 0 ] = TOKEN_UINT8 ; tokens [ 1 ] = 0 ; tokens [ 2 ] = 1 ; tokens [ 3 ] = 1 ;
tokens [ 4 ] = TOKEN_IDENTIFIER ; tokens [ 5 ] = 0 ; tokens [ 6 ] = 1 ; tokens [ 7 ] = 7 ;
tokens [ 8 ] = TOKEN_ASSIGNMENT ; tokens [ 9 ] = 0 ; tokens [ 10 ] = 1 ; tokens [ 11 ] = 9 ;
tokens [ 12 ] = TOKEN_CONSTANT_INTEGER ; tokens [ 13 ] = 0 ; tokens [ 14 ] = 1 ; tokens [ 15 ] = 11 ;
tokens [ 16 ] = TOKEN_SEMICOLON ; tokens [ 17 ] = 0 ; tokens [ 18 ] = 1 ; tokens [ 19 ] = 12 ;
tokens [ 20 ] = TOKEN_UINT64 ; tokens [ 21 ] = 0 ; tokens [ 22 ] = 2 ; tokens [ 23 ] = 1 ;
tokens [ 24 ] = TOKEN_IDENTIFIER ; tokens [ 25 ] = 1 ; tokens [ 26 ] = 2 ; tokens [ 27 ] = 8 ;
tokens [ 28 ] = TOKEN_ASSIGNMENT ; tokens [ 29 ] = 0 ; tokens [ 30 ] = 2 ; tokens [ 31 ] = 10 ;
tokens [ 32 ] = TOKEN_CONSTANT_INTEGER ; tokens [ 33 ] = 0 ; tokens [ 34 ] = 2 ; tokens [ 35 ] = 12 ;
tokens [ 36 ] = TOKEN_SEMICOLON ; tokens [ 37 ] = 0 ; tokens [ 38 ] = 2 ; tokens [ 39 ] = 13 ;
tokens [ 40 ] = TOKEN_IDENTIFIER ; tokens [ 41 ] = 2 ; tokens [ 42 ] = 3 ; tokens [ 43 ] = 1 ;
tokens [ 44 ] = TOKEN_ASSIGNMENT ; tokens [ 45 ] = 0 ; tokens [ 46 ] = 3 ; tokens [ 47 ] = 3 ;
tokens [ 48 ] = TOKEN_CONSTANT_INTEGER ; tokens [ 49 ] = 2 ; tokens [ 50 ] = 3 ; tokens [ 51 ] = 5 ;
tokens [ 52 ] = TOKEN_MULTIPLY ; tokens [ 53 ] = 0 ; tokens [ 54 ] = 3 ; tokens [ 55 ] = 7 ;
tokens [ 56 ] = TOKEN_CONSTANT_INTEGER ; tokens [ 57 ] = 2 ; tokens [ 58 ] = 3 ; tokens [ 59 ] = 9 ;
tokens [ 60 ] = TOKEN_SEMICOLON ; tokens [ 61 ] = 0 ; tokens [ 62 ] = 3 ; tokens [ 63 ] = 10 ;
tokens [ 64 ] = TOKEN_IDENTIFIER ; tokens [ 65 ] = 3 ; tokens [ 66 ] = 4 ; tokens [ 67 ] = 1 ;
tokens [ 68 ] = TOKEN_ASSIGNMENT ; tokens [ 69 ] = 0 ; tokens [ 70 ] = 4 ; tokens [ 71 ] = 3 ;
tokens [ 72 ] = TOKEN_IDENTIFIER ; tokens [ 73 ] = 4 ; tokens [ 74 ] = 4 ; tokens [ 75 ] = 5 ;
tokens [ 76 ] = TOKEN_DIVIDE ; tokens [ 77 ] = 0 ; tokens [ 78 ] = 4 ; tokens [ 79 ] = 7 ;
tokens [ 80 ] = TOKEN_CONSTANT_INTEGER ; tokens [ 81 ] = 4 ; tokens [ 82 ] = 4 ; tokens [ 83 ] = 9 ;
tokens [ 84 ] = TOKEN_SEMICOLON ; tokens [ 85 ] = 0 ; tokens [ 86 ] = 4 ; tokens [ 87 ] = 10 ;
tokenCount = 88 ;

` ; a
`
stringToPush [ 0 ] = 97 ;
stringToPush [ 1 ] = 0 ;
_ = pushString ( ) ;

` ; b
`
stringToPush [ 0 ] = 98 ;
stringToPush [ 1 ] = 0 ;
_ = pushString ( ) ;

` ; a
`
stringToPush [ 0 ] = 97 ;
stringToPush [ 1 ] = 0 ;
_ = pushString ( ) ;

` ; b
`
stringToPush [ 0 ] = 98 ;
stringToPush [ 1 ] = 0 ;
_ = pushString ( ) ;

` ; a
`
stringToPush [ 0 ] = 97 ;
stringToPush [ 1 ] = 0 ;
_ = pushString ( ) ;

i = 0 ;

uint64 errorAtLine = 0 ;
uint64 errorAtColumn = 0 ;
proc consumeToken ( )
    if currentToken == [expectedToken] then
        i = i + tokenSize ;
        currentToken = tokens [ i ] ;
        i = i + tokenSize ;
        nextToken = tokens [ i ] ;
        i = i - tokenSize ;
    else 
        _ = i + 2 ;
        errorAtLine = tokens [ _ ] ;
        _ = i + 3 ;
        errorAtColumn = tokens [ _ ] ;
        `
        printf(`"parser.strata:%d:%d: "`, [errorAtLine], [errorAtColumn])
        printf(`"expected token %d but got %d\n"`, [expectedToken], [currentToken])
        ExitProcess(1) `
    end
endproc consumeToken

proc indentifierRedeclared ( namePointer )
    _ = i - tokenSize ;
    _ = _ + 2 ;
    errorAtLine = tokens [ _ ] ;
    _ = i - tokenSize ;
    _ = _ + 3 ;
    errorAtColumn = tokens [ _ ] ;
    _ = readString ( namePointer ) ; ` 
    printf(`"parser.strata:%d:%d: "`, [errorAtLine], [errorAtColumn])
    printf(`"identifier redeclared: %s\n"`, stringAtPointer) ;
    ExitProcess(1)`
endproc indentifierRedeclared

proc indentifierUnknown ( namePointer )
    _ = i - tokenSize ;
    _ = _ + 2 ;
    errorAtLine = tokens [ _ ] ;
    _ = i - tokenSize ;
    _ = _ + 3 ;
    errorAtColumn = tokens [ _ ] ;
    _ = readString ( namePointer ) ; ` 
    printf(`"parser.strata:%d:%d: "`, [errorAtLine], [errorAtColumn])
    printf(`"unknown identifier: %s\n"`, stringAtPointer) ;
    ExitProcess(1)`
endproc indentifierUnknown

proc unexpectedToken ( ) 
    _ = i + 2 ;
    errorAtLine = tokens [ _ ] ;
    _ = i + 3 ;
    errorAtColumn = tokens [ _ ] ;
    `
    printf(`"parser.strata:%d:%d: "`, [errorAtLine], [errorAtColumn])
    printf(`"unexpected token %d\n"`, [currentToken])
    ExitProcess(1)`
endproc unexpectedToken

proc parseNumber ( )
    expectedToken = TOKEN_CONSTANT_INTEGER ;
    _ = i + 1 ;
    _ = tokens [ _ ] ;
    consumeToken ( ) ; `
    printf(`"[Trace] Number: %d\n"`, [_])
    ; set result
    mov rax, [_]`
endproc parseNumber

proc parseIdentifier ( )
    expectedToken = TOKEN_IDENTIFIER ;
    _ = i + 1 ;
    _ = tokens [ _ ] ;
    consumeToken ( ) ; `
    printf(`"[Trace] Identifier: #%d\n"`, [_])
    ; set result
    mov rax, [_]`
endproc parseIdentifier

proc parseType ( )
    if currentToken == [TOKEN_UINT8] then
        _ = TYPE_UINT8 ;
         i = i + tokenSize ;
        currentToken = tokens [ i ] ;
    else if currentToken == [TOKEN_UINT64] then
        _ = TYPE_UINT64 ;
        i = i + tokenSize ;
        currentToken = tokens [ i ] ;
    else
        unexpectedToken ( ) ;
    end end 
    `
    ; set result
    mov rax, [_]`
endproc parseType

proc parseArrayDeclaration ( )
    expectedToken = TOKEN_LEFT_BRACKET ;
    consumeToken ( ) ;

    gvValue = parseNumber ( ) ;

    expectedToken = TOKEN_RIGHT_BRACKET ;
    consumeToken ( ) ;

    gvNamePointer = parseIdentifier ( ) ;

    _ = addGlobalSymbol ( gvType gvNamePointer gvValue ) ; `
    printf(`"[Trace] Array declaration: type %d, value %d\n"`, [gvType], [gvValue])`
endproc parseArrayDeclaration

proc parseIntegerDeclaration ( )
    gvNamePointer = parseIdentifier ( ) ;

    fgsIndex = findGlobalSymbol ( gvNamePointer ) ;

    if fgsIndex != -1 then
        _ = indentifierRedeclared ( gvNamePointer ) ;
    end

    expectedToken = TOKEN_ASSIGNMENT ;
    consumeToken ( ) ;

    gvValue = parseNumber ( ) ;
    
    _ = addGlobalVariable ( gvType gvNamePointer gvValue ) ;
    _ = addGlobalSymbol ( gvType gvNamePointer 0 ) ; `
    printf(`"[Trace] Variable declaration: type %d, value %d\n"`, [gvType], [gvValue])`
endproc parseIntegerDeclaration 
    

proc parseVariableDeclaration ( )
    gvType = parseType ( ) ;

    if currentToken == [TOKEN_LEFT_BRACKET] then
        parseArrayDeclaration ( ) ;
    else if currentToken == [TOKEN_IDENTIFIER] then
        parseIntegerDeclaration ( ) ;
    else
        unexpectedToken ( ) ;
    end end

    expectedToken = TOKEN_SEMICOLON ;
    consumeToken ( ) ; 
endproc parseVariableDeclaration

proc forward parseAdditiveExpression
proc forward parseStatements
proc forward parseArrayAccess

uint64 fpIdentifier = 0 ;
proc parseFactor ( ) 
    if currentToken == [TOKEN_CONSTANT_INTEGER] then
        _ = parseNumber ( ) ; `
        printf(`"\tpush %d\n"`, [_])`
    else if currentToken == [TOKEN_LEFT_PARENTHESIS] then
        expectedToken = TOKEN_LEFT_PARENTHESIS ;
        consumeToken ( ) ;

        parseAdditiveExpression ( ) ;
 
        expectedToken = TOKEN_RIGHT_PARENTHESIS ;
        consumeToken ( ) ;
    else if currentToken == [TOKEN_IDENTIFIER] then
        if nextToken == [TOKEN_LEFT_BRACKET] then 
            fpIdentifier = parseArrayAccess ( ) ; 
            
            fgsIndex = findGlobalSymbol ( fpIdentifier ) ;

            if fgsIndex == -1 then
                _ = indentifierUnknown ( fpIdentifier ) ;
            end `
            printf(`"[Trace] Factor: array\n"`)`
        else
            _ = i + 1 ;
            _ = tokens [ _ ] ;
            `
            printf(`"[Trace] Factor: variable #%d\n"`, [_])
            `

            fpIdentifier = parseIdentifier ( ) ;

            fgsIndex = findGlobalSymbol ( fpIdentifier ) ;

            if fgsIndex == -1 then
                _ = indentifierUnknown ( fpIdentifier ) ;
            end 

            _ = readString ( fpIdentifier ) ; 

            if gsType == [TYPE_UINT8] then ` 
                printf(`"\tpush byte [%s]\n"`, stringAtPointer)`
            else if gsType == [TYPE_UINT64] then ` 
                printf(`"\tpush qword [%s]\n"`, stringAtPointer)`
            else ` 
                printf(`"[Error] Error: unknown type %d\n"`, [gsType])
                ExitProcess(1)`
            end end
        end
    else
        unexpectedToken ( ) ;
    end end end
endproc parseFactor

proc parseMultiplicativeExpression ( ) 
    parseFactor ( ) ;
    while true == 1 do 
        if currentToken == [TOKEN_MULTIPLY] then
            expectedToken = TOKEN_MULTIPLY ;
            consumeToken ( ) ;
            parseFactor ( ) ; `
            printf(`"[Trace] MULTIPLY *\n"`)
            printf(`"\tpop rbx\n\tpop rax\n\tmul rbx\n\tpush rax\n"`)`
        else if currentToken == [TOKEN_DIVIDE] then
            expectedToken = TOKEN_DIVIDE ;
            consumeToken ( ) ;
            parseFactor ( ) ; `
            printf(`"[Trace] DIVIDE /\n"`)
            printf(`"\tpop rbx\n\tpop rax\n\tdiv rbx\n\tpush rax\n"`)`
        else if currentToken == [TOKEN_MODULO] then
            expectedToken = TOKEN_MODULO ;
            consumeToken ( ) ;
            parseFactor ( ) ; `
            printf(`"[Trace] MODULO %%\n"`)
            printf(`"\tpop rbx\n\tpop rax\n\tdiv rbx\n\tpush rdx\n"`)`
        else
            break 
        end end end
    end
endproc parseMultiplicativeExpression

proc parseAdditiveExpression ( ) 
    parseMultiplicativeExpression ( ) ; 
    while true == 1 do 
        if currentToken == [TOKEN_PLUS] then
            expectedToken = TOKEN_PLUS ;
            consumeToken ( ) ;
            parseMultiplicativeExpression ( ) ; `
            printf(`"[Trace] PLUS +\n"`)
            printf(`"\tpop rbx\n\tpop rax\n\tadd rax, rbx\n\tpush rax\n"`)`
        else if currentToken == [TOKEN_MINUS] then
            expectedToken = TOKEN_MINUS ;
            consumeToken ( ) ;
            parseMultiplicativeExpression ( ) ; `
            printf(`"[Trace] MINUS -\n"`)
            printf(`"\tpop rbx\n\tpop rax\n\tsub rax, rbx\n\tpush rax\n"`)`
        else
            break ;
        end end
    end
endproc parseAdditiveExpression 

proc parseRelationalExpression ( )
    parseAdditiveExpression ( ) ;
    if currentToken == [TOKEN_LESS_THAN] then
        expectedToken = TOKEN_LESS_THAN ;
        consumeToken ( ) ;
        parseAdditiveExpression ( ) ; `
        printf(`"[Trace] LESS_THAN <\n"`)`
    else if currentToken == [TOKEN_LESS_THAN_OR_EQUAL_TO] then
        expectedToken = TOKEN_LESS_THAN_OR_EQUAL_TO ;
        consumeToken ( ) ;
        parseAdditiveExpression ( ) ; `
        printf(`"[Trace] LESS_THAN_OR_EQUAL_TO <=\n"`)`
    else if currentToken == [TOKEN_GREATER_THAN] then
        expectedToken = TOKEN_GREATER_THAN ;
        consumeToken ( ) ;
        parseAdditiveExpression ( ) ; `
        printf(`"[Trace] GREATER_THAN >\n"`)`
    else if currentToken == [TOKEN_GREATER_THAN_OR_EQUAL_TO] then
        expectedToken = TOKEN_GREATER_THAN_OR_EQUAL_TO ;
        consumeToken ( ) ;
        parseAdditiveExpression ( ) ; `
        printf(`"[Trace] GREATER_THAN_OR_EQUAL_TO >=\n"`)`
    else if currentToken == [TOKEN_EQUALS] then 
        expectedToken = TOKEN_EQUALS ;
        consumeToken ( ) ;
        parseAdditiveExpression ( ) ; `
        printf(`"[Trace] EQUALS ==\n"`)`
    else if currentToken == [TOKEN_NOT_EQUALS] then
        expectedToken = TOKEN_NOT_EQUALS ;
        consumeToken ( ) ;
        parseAdditiveExpression ( ) ; `
        printf(`"[Trace] NOT_EQUALS !=\n"`)`
    end end end end end end
endproc parseRelationalExpression

proc parseLogicalAndExpression ( )
    parseRelationalExpression ( ) ;
    while true == 1 do 
        if currentToken == [TOKEN_LOGICAL_AND] then
            expectedToken = TOKEN_LOGICAL_AND ;
            consumeToken ( ) ;
            parseRelationalExpression ( ) ; `
            printf(`"[Trace] LOGICAL_AND &&\n"`)`
        else
            break ;
        end
    end
endproc parseLogicalAndExpression

proc parseLogicalOrExpression ( )
    parseLogicalAndExpression ( ) ;
    while true == 1 do 
        if currentToken == [TOKEN_LOGICAL_OR] then
            expectedToken = TOKEN_LOGICAL_OR ;
            consumeToken ( ) ;
            parseLogicalAndExpression ( ) ; `
            printf(`"[Trace] LOGICAL_OR ||\n"`)`
        else
            break ;
        end
    end
endproc parseLogicalOrExpression

uint64 paaIdentifier = 0 ;
proc parseArrayAccess ( ) 
    paaIdentifier = parseIdentifier ( ) ; 
    expectedToken = TOKEN_LEFT_BRACKET ;
    consumeToken ( ) ;
    parseAdditiveExpression ( ) ;
    expectedToken = TOKEN_RIGHT_BRACKET ;
    consumeToken ( ) ; `
    mov rax, [paaIdentifier]`
endproc parseArrayAccess

uint64 paIdentifier = 0 ;
proc parseAssignable ( )
    if nextToken == [TOKEN_LEFT_BRACKET] then 
        paIdentifier = parseArrayAccess ( ) ; 

        fgsIndex = findGlobalSymbol ( paIdentifier ) ;

        if fgsIndex == -1 then
            _ = indentifierUnknown ( paIdentifier ) ;
        end `
        printf(`"[Trace] Assignable: array, ct %d\n"`, [currentToken])`
    else
        paIdentifier = parseIdentifier ( ) ; 
        
        fgsIndex = findGlobalSymbol ( paIdentifier ) ;

        if fgsIndex == -1 then
            _ = indentifierUnknown ( paIdentifier ) ;
        end `
        printf(`"[Trace] Assignable: variable\n"`)`
    end `
    mov rax, [paIdentifier]`
endproc parseAssignable

uint64 pasIdentifier = 0 ;
proc parseAssignmentStatement ( )
    pasIdentifier = parseAssignable ( ) ;

    expectedToken = TOKEN_ASSIGNMENT ;
    consumeToken ( ) ;

    parseLogicalOrExpression ( ) ;

    expectedToken = TOKEN_SEMICOLON ;
    consumeToken ( ) ; 

    fgsIndex = findGlobalSymbol ( pasIdentifier ) ;

    if fgsIndex == -1 then
        _ = indentifierUnknown ( pasIdentifier ) ;
    end
    _ = readString ( pasIdentifier ) ;
    
    if gsType == [TYPE_UINT8] then `
        printf(`"[Debug] Assigning value to a uint8\n"`)
        printf(`"\tpop rax\n\tmov byte [%s], al\n"`, stringAtPointer)`
    else if gsType == [TYPE_UINT64] then `
        printf(`"[Debug] Assigning value to a uint64\n"`)
        printf(`"\tpop rax\n\tmov qword [%s], rax\n"`, stringAtPointer)`
    else `
        printf(`"[Error] Error: unknown type %d\n"`, [gsType])
        ExitProcess(1)`
    end end `
    printf(`"[Trace] Assignment statement for: '%s'\n"`, stringAtPointer)`
endproc parseAssignmentStatement

proc parseIfStatement ( )
    expectedToken = TOKEN_IF ;
    consumeToken ( ) ; `
    printf(`"[Trace] If statement: IF\n"`)
    `

    parseLogicalOrExpression ( ) ;

    expectedToken = TOKEN_THEN ;
    consumeToken ( ) ;
    `
    printf(`"[Trace] If statement: THEN\n"`)
    `
    parseStatements ( ) ;

    while true == 1 do
        if currentToken == [TOKEN_ELSE] then 
            expectedToken = TOKEN_ELSE ;
            consumeToken ( ) ; 
            `
            printf(`"[Trace] If statement: ELSE\n"`)
            `
            if currentToken == [TOKEN_IF] then
                expectedToken = TOKEN_IF ;
                consumeToken ( ) ; `
                printf(`"[Trace] If statement: IF\n"`)
                `
                parseLogicalOrExpression ( ) ;

                expectedToken = TOKEN_THEN ;
                consumeToken ( ) ; `
                printf(`"[Trace] If statement: THEN\n"`)
                `
            end
            parseStatements ( ) ; 
        else 
            break ;
        end 
    end

    expectedToken = TOKEN_END ;
    consumeToken ( ) ; `
    printf(`"[Trace] If statement: END\n"`)`
endproc parseIfStatement

proc parseWhileStatement ( )
    expectedToken = TOKEN_WHILE ;
    consumeToken ( ) ; `
    printf(`"[Trace] While statement: WHILE\n"`)
    `
    parseLogicalOrExpression ( ) ;

    expectedToken = TOKEN_DO ;
    consumeToken ( ) ; `
    printf(`"[Trace] While statement: DO\n"`)
    `
    parseStatements ( ) ;

    expectedToken = TOKEN_END ;
    consumeToken ( ) ; `
    printf(`"[Trace] While statement: END\n"`)`
endproc parseWhileStatement

proc parseBreakStatement ( )
    expectedToken = TOKEN_BREAK ;
    consumeToken ( ) ; 
    expectedToken = TOKEN_SEMICOLON ;
    consumeToken ( ) ; `
    printf(`"[Trace] Break statement: BREAK\n"`)`
endproc parseBreakStatement

proc parseContinueStatement ( )
    expectedToken = TOKEN_CONTINUE ;
    consumeToken ( ) ;
    expectedToken = TOKEN_SEMICOLON ;
    consumeToken ( ) ; `
    printf(`"[Trace] Continue statement: CONTINUE\n"`)`
endproc parseContinueStatement

proc parseStatement ( )
    if currentToken == [TOKEN_UINT64] then
        parseVariableDeclaration ( ) ;
    else if currentToken == [TOKEN_UINT8] then
        parseVariableDeclaration ( ) ;
    else if currentToken == [TOKEN_IDENTIFIER] then
        parseAssignmentStatement ( ) ;
    else if currentToken == [TOKEN_IF] then
        parseIfStatement ( ) ;
    else if currentToken == [TOKEN_WHILE] then
        parseWhileStatement ( ) ;
    else if currentToken == [TOKEN_BREAK] then
        parseBreakStatement ( ) ;
    else if currentToken == [TOKEN_CONTINUE] then
        parseContinueStatement ( ) ;
    else
        unexpectedToken ( ) ;
    end end end end end end end
endproc parseStatement

proc parseStatements ( )
    while true == 1 do 
        if currentToken == [TOKEN_END] then
            break ;
        else if currentToken == [TOKEN_ELSE] then
            break ;
        else
            parseStatement ( ) ;
        end end
    end
endproc parseStatements

i = 0 ;

while i < [tokenCount] do
    currentToken = tokens [ i ] ;
    parseStatement ( ) ;
end

i = 0 ;

while i < [globalVariableCount] do
    _ = gvTypeOffset + i * globalVariableSize ;
    gvType = globalVariables [ _ ] ;
    _ = gvNameOffset + i * globalVariableSize ;
    gvNamePointer = globalVariables [ _ ] ;
    _ = gvValueOffset + i * globalVariableSize ;
    gvValue = globalVariables [ _ ] ;
    _ = readString ( gvNamePointer ) ; 
    
    if gvType == [TYPE_UINT8] then `
        printf(`"section .data\r\n\t%s db %d\n"`, stringAtPointer, [gvValue])`
    else if gvType == [TYPE_UINT64] then `
        printf(`"section .data\r\n\t%s dq %d\n"`, stringAtPointer, [gvValue])`
    else `
        printf(`"Error: unknown type %d\n"`, [gvType])
        ExitProcess(1)`
    end end

    i = i + 1 ;
end

`
ExitProcess(0)
`