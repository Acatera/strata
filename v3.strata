// uint8 var_8 += 123 + 1 - 20 / 5 * 8 % 6;
// uint16 var_16 -= 123 + 1 - 20 / 5 * 8 % 6;
// uint32 var_32 *= 123 + 1 - 20 / 5 * 8 % 6;
// uint64 var_64 /= 123 + 1 - 20 / 5 * 8 % 6;
// int64 var_i64 %= 123 + 1 - 20 / 5 * 8 % 6;

// char c = 'a';
// string s = "hello";

// bool b = var_8 == 0;
// b = var_8 != 0;
// b = var_8 < 0;
// b = var_8 <= 0;
// b = var_8 > 0;
// b = var_8 >= 0;

// uint64 var_64;
// uint64 var2_64 = 1;

proc main()
    uint64 sub;
    uint64 var_64 = 2147483648;
    uint64 var2_64 = 2;
    uint64 var3_64 = 3;
    bool b;
    assert(var3_64 == 3);

    sub = (99999 * 88888) + (-5 + (-10)) - (12 - 4 * var3_64 + 2) + (17 % 5) + (5 / 2) * ((3 + 2) * 4) - 5 + (0 * 15) + (1-8);
    assert(sub == 8888711125);
    // assert(sub == 0x211cef7d5);

    b = var_64 == var_64;          assert(b == 1);
    b = var_64 != var_64;          assert(b == 0);
    b = var_64 < var_64;           assert(b == 0);
    b = var_64 <= var_64;          assert(b == 1);
    b = var_64 > var_64;           assert(b == 0);
    b = var_64 >= var_64;          assert(b == 1);
    b = !(!2 == !0);               assert(b == 1);
    b = 1 << (var2_64 + 4) == 64;  assert(b == 1);
    var3_64 = -(var3_64 + 1 << 3); assert(var3_64 == -32);

    assert(1 << 3 == 8);

    // sub = 1 + 4 * 2;
    
    // uint64 sum = var_64 + var2_64;
    // sub = var_64 - var2_64;
end

// proc test_proc()
//     uint8 ch;
//     ch = 0;
// end