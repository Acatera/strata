@define STD_OUTPUT_HANDLE 0xFFFFFFF5
@define NULL 0

@define NODE_TYPE_PROGRAM       1
@define NODE_TYPE_STATEMENTS    2


extern proc GetStdHandle(uint64 nStdHandle) -> uint64;
extern proc WriteConsoleA(pointer hConsoleOutput, pointer lpBuffer, uint64 nNumberOfCharsToWrite, pointer lpNumberOfCharsWritten) -> uint64;

extern proc GetProcessHeap() -> pointer;
extern proc HeapAlloc(uint64 hHeap, uint64 flags, uint64 size) -> pointer;


uint64 std_handle = 0;
uint64 process_heap = 0;
uint8[] alloc_error = "HeapAlloc failed\n";
uint8[] alloc_success = "HeapAlloc succeeded\n";
uint8[] test2 = "test\n";
uint8[] hello = "Hello, World!\n";
std_handle = GetStdHandle(STD_OUTPUT_HANDLE);

struct Node
    uint64 type;
    pointer next;
end
Node program_node;

process_heap = GetProcessHeap();
if process_heap == NULL then
    exit(1);
end
Node* node_pointer;
node_pointer = HeapAlloc(process_heap, 0, 16);
if node_pointer == NULL then 
    WriteConsoleA(std_handle, alloc_error, 16, 0);
    exit(1);
end

WriteConsoleA(std_handle, alloc_success, 20, 0);

program_node.type = NODE_TYPE_PROGRAM;
program_node.next = node_pointer;

node_pointer.type = NODE_TYPE_STATEMENTS;
node_pointer.next = NULL;

// Uint16, uint32, int8, int16, uint32, int64
// sizeof() intrinsic
// offsetof() intrinsic
// Strings - compare, index, read, write
// Characters - convert to uint8
// Variadic procedures
// Macros
// String literals
// `test`, `str` is not a valid identifier because it is a keyword in assembly
// number parsing always treats the number as hex, resulting in identifier ceed being parsed as 0xceed
// Includes
// Asserts
// 
// For loops
// Generate byte code
// Dead code elimination
// Constant folding 
// Tests - edit some simple examples and develop a C# app to run them. Compare output
// Type check 
// 